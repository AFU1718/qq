// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.zz.ady.idl

@SerialVersionUID(0L)
final case class StatsAs(
    ts: java.time.Instant = com.zz.ady.idl.StatsAs._typemapper_ts.toCustom(0L),
    stats: Vector[com.zz.ady.idl.StatsA] = Vector.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[StatsAs] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = com.zz.ady.idl.StatsAs._typemapper_ts.toBase(ts)
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(10, __value)
        }
      };
      stats.foreach { __item =>
        val __value = __item
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = com.zz.ady.idl.StatsAs._typemapper_ts.toBase(ts)
        if (__v != 0L) {
          _output__.writeInt64(10, __v)
        }
      };
      stats.foreach { __v =>
        val __m = __v
        _output__.writeTag(20, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def withTs(__v: java.time.Instant): StatsAs = copy(ts = __v)
    def clearStats = copy(stats = Vector.empty)
    def addStats(__vs: com.zz.ady.idl.StatsA*): StatsAs = addAllStats(__vs)
    def addAllStats(__vs: Iterable[com.zz.ady.idl.StatsA]): StatsAs = copy(stats = stats ++ __vs)
    def withStats(__v: Vector[com.zz.ady.idl.StatsA]): StatsAs = copy(stats = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 10 => {
          val __t = com.zz.ady.idl.StatsAs._typemapper_ts.toBase(ts)
          if (__t != 0L) __t else null
        }
        case 20 => stats
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 10 => _root_.scalapb.descriptors.PLong(com.zz.ady.idl.StatsAs._typemapper_ts.toBase(ts))
        case 20 => _root_.scalapb.descriptors.PRepeated(stats.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.zz.ady.idl.StatsAs
}

object StatsAs extends scalapb.GeneratedMessageCompanion[com.zz.ady.idl.StatsAs] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.zz.ady.idl.StatsAs] = this
  def merge(`_message__`: com.zz.ady.idl.StatsAs, `_input__`: _root_.com.google.protobuf.CodedInputStream): com.zz.ady.idl.StatsAs = {
    var __ts = `_message__`.ts
    val __stats = (Vector.newBuilder[com.zz.ady.idl.StatsA] ++= `_message__`.stats)
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 80 =>
          __ts = com.zz.ady.idl.StatsAs._typemapper_ts.toCustom(_input__.readInt64())
        case 162 =>
          __stats += _root_.scalapb.LiteParser.readMessage(_input__, com.zz.ady.idl.StatsA.defaultInstance)
        case tag => _input__.skipField(tag)
      }
    }
    com.zz.ady.idl.StatsAs(
        ts = __ts,
        stats = __stats.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.zz.ady.idl.StatsAs] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.zz.ady.idl.StatsAs(
        ts = com.zz.ady.idl.StatsAs._typemapper_ts.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Long]).getOrElse(0L)),
        stats = __fieldsMap.get(scalaDescriptor.findFieldByNumber(20).get).map(_.as[Vector[com.zz.ady.idl.StatsA]]).getOrElse(Vector.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = StatsProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = StatsProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 20 => __out = com.zz.ady.idl.StatsA
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.zz.ady.idl.StatsAs(
    ts = com.zz.ady.idl.StatsAs._typemapper_ts.toCustom(0L),
    stats = Vector.empty
  )
  implicit class StatsAsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.zz.ady.idl.StatsAs]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.zz.ady.idl.StatsAs](_l) {
    def ts: _root_.scalapb.lenses.Lens[UpperPB, java.time.Instant] = field(_.ts)((c_, f_) => c_.copy(ts = f_))
    def stats: _root_.scalapb.lenses.Lens[UpperPB, Vector[com.zz.ady.idl.StatsA]] = field(_.stats)((c_, f_) => c_.copy(stats = f_))
  }
  final val TS_FIELD_NUMBER = 10
  final val STATS_FIELD_NUMBER = 20
  @transient
  private val _typemapper_ts: _root_.scalapb.TypeMapper[_root_.scala.Long, java.time.Instant] = implicitly[_root_.scalapb.TypeMapper[_root_.scala.Long, java.time.Instant]]
  def of(
    ts: java.time.Instant,
    stats: Vector[com.zz.ady.idl.StatsA]
  ): _root_.com.zz.ady.idl.StatsAs = _root_.com.zz.ady.idl.StatsAs(
    ts,
    stats
  )
}
