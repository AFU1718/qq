// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.zz.ady.idl

/** 项目组
  *
  * @param id
  *   项目组id
  * @param projectGroupName
  *   项目组名称
  * @param note
  *   备注
  * @param createdBy
  *   创建人id
  * @param updatedBy
  *   最近更新人id
  * @param createdAt
  *   创建时间
  * @param updatedAt
  *   最近更新时间
  * @param isDeleted
  *   删除标记
  */
@SerialVersionUID(0L)
final case class ProjectGroup(
    id: _root_.scala.Int = 0,
    projectGroupName: _root_.scala.Predef.String = "",
    note: _root_.scala.Predef.String = "",
    createdBy: _root_.scala.Int = 0,
    updatedBy: _root_.scala.Int = 0,
    createdAt: _root_.scala.Predef.String = "",
    updatedAt: _root_.scala.Predef.String = "",
    isDeleted: _root_.scala.Int = 0
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ProjectGroup] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = id
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
        }
      };
      
      {
        val __value = projectGroupName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = note
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = createdBy
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, __value)
        }
      };
      
      {
        val __value = updatedBy
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(5, __value)
        }
      };
      
      {
        val __value = createdAt
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
        }
      };
      
      {
        val __value = updatedAt
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, __value)
        }
      };
      
      {
        val __value = isDeleted
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(8, __value)
        }
      };
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = id
        if (__v != 0) {
          _output__.writeInt32(1, __v)
        }
      };
      {
        val __v = projectGroupName
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = note
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = createdBy
        if (__v != 0) {
          _output__.writeInt32(4, __v)
        }
      };
      {
        val __v = updatedBy
        if (__v != 0) {
          _output__.writeInt32(5, __v)
        }
      };
      {
        val __v = createdAt
        if (!__v.isEmpty) {
          _output__.writeString(6, __v)
        }
      };
      {
        val __v = updatedAt
        if (!__v.isEmpty) {
          _output__.writeString(7, __v)
        }
      };
      {
        val __v = isDeleted
        if (__v != 0) {
          _output__.writeInt32(8, __v)
        }
      };
    }
    def withId(__v: _root_.scala.Int): ProjectGroup = copy(id = __v)
    def withProjectGroupName(__v: _root_.scala.Predef.String): ProjectGroup = copy(projectGroupName = __v)
    def withNote(__v: _root_.scala.Predef.String): ProjectGroup = copy(note = __v)
    def withCreatedBy(__v: _root_.scala.Int): ProjectGroup = copy(createdBy = __v)
    def withUpdatedBy(__v: _root_.scala.Int): ProjectGroup = copy(updatedBy = __v)
    def withCreatedAt(__v: _root_.scala.Predef.String): ProjectGroup = copy(createdAt = __v)
    def withUpdatedAt(__v: _root_.scala.Predef.String): ProjectGroup = copy(updatedAt = __v)
    def withIsDeleted(__v: _root_.scala.Int): ProjectGroup = copy(isDeleted = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = id
          if (__t != 0) __t else null
        }
        case 2 => {
          val __t = projectGroupName
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = note
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = createdBy
          if (__t != 0) __t else null
        }
        case 5 => {
          val __t = updatedBy
          if (__t != 0) __t else null
        }
        case 6 => {
          val __t = createdAt
          if (__t != "") __t else null
        }
        case 7 => {
          val __t = updatedAt
          if (__t != "") __t else null
        }
        case 8 => {
          val __t = isDeleted
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(id)
        case 2 => _root_.scalapb.descriptors.PString(projectGroupName)
        case 3 => _root_.scalapb.descriptors.PString(note)
        case 4 => _root_.scalapb.descriptors.PInt(createdBy)
        case 5 => _root_.scalapb.descriptors.PInt(updatedBy)
        case 6 => _root_.scalapb.descriptors.PString(createdAt)
        case 7 => _root_.scalapb.descriptors.PString(updatedAt)
        case 8 => _root_.scalapb.descriptors.PInt(isDeleted)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.zz.ady.idl.ProjectGroup
}

object ProjectGroup extends scalapb.GeneratedMessageCompanion[com.zz.ady.idl.ProjectGroup] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.zz.ady.idl.ProjectGroup] = this
  def merge(`_message__`: com.zz.ady.idl.ProjectGroup, `_input__`: _root_.com.google.protobuf.CodedInputStream): com.zz.ady.idl.ProjectGroup = {
    var __id = `_message__`.id
    var __projectGroupName = `_message__`.projectGroupName
    var __note = `_message__`.note
    var __createdBy = `_message__`.createdBy
    var __updatedBy = `_message__`.updatedBy
    var __createdAt = `_message__`.createdAt
    var __updatedAt = `_message__`.updatedAt
    var __isDeleted = `_message__`.isDeleted
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __id = _input__.readInt32()
        case 18 =>
          __projectGroupName = _input__.readStringRequireUtf8()
        case 26 =>
          __note = _input__.readStringRequireUtf8()
        case 32 =>
          __createdBy = _input__.readInt32()
        case 40 =>
          __updatedBy = _input__.readInt32()
        case 50 =>
          __createdAt = _input__.readStringRequireUtf8()
        case 58 =>
          __updatedAt = _input__.readStringRequireUtf8()
        case 64 =>
          __isDeleted = _input__.readInt32()
        case tag => _input__.skipField(tag)
      }
    }
    com.zz.ady.idl.ProjectGroup(
        id = __id,
        projectGroupName = __projectGroupName,
        note = __note,
        createdBy = __createdBy,
        updatedBy = __updatedBy,
        createdAt = __createdAt,
        updatedAt = __updatedAt,
        isDeleted = __isDeleted
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.zz.ady.idl.ProjectGroup] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.zz.ady.idl.ProjectGroup(
        id = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        projectGroupName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        note = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        createdBy = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        updatedBy = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        createdAt = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        updatedAt = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        isDeleted = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ProjectGroupApiProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ProjectGroupApiProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.zz.ady.idl.ProjectGroup(
    id = 0,
    projectGroupName = "",
    note = "",
    createdBy = 0,
    updatedBy = 0,
    createdAt = "",
    updatedAt = "",
    isDeleted = 0
  )
  implicit class ProjectGroupLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.zz.ady.idl.ProjectGroup]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.zz.ady.idl.ProjectGroup](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def projectGroupName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.projectGroupName)((c_, f_) => c_.copy(projectGroupName = f_))
    def note: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.note)((c_, f_) => c_.copy(note = f_))
    def createdBy: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.createdBy)((c_, f_) => c_.copy(createdBy = f_))
    def updatedBy: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.updatedBy)((c_, f_) => c_.copy(updatedBy = f_))
    def createdAt: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.createdAt)((c_, f_) => c_.copy(createdAt = f_))
    def updatedAt: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.updatedAt)((c_, f_) => c_.copy(updatedAt = f_))
    def isDeleted: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.isDeleted)((c_, f_) => c_.copy(isDeleted = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val PROJECT_GROUP_NAME_FIELD_NUMBER = 2
  final val NOTE_FIELD_NUMBER = 3
  final val CREATED_BY_FIELD_NUMBER = 4
  final val UPDATED_BY_FIELD_NUMBER = 5
  final val CREATED_AT_FIELD_NUMBER = 6
  final val UPDATED_AT_FIELD_NUMBER = 7
  final val IS_DELETED_FIELD_NUMBER = 8
  def of(
    id: _root_.scala.Int,
    projectGroupName: _root_.scala.Predef.String,
    note: _root_.scala.Predef.String,
    createdBy: _root_.scala.Int,
    updatedBy: _root_.scala.Int,
    createdAt: _root_.scala.Predef.String,
    updatedAt: _root_.scala.Predef.String,
    isDeleted: _root_.scala.Int
  ): _root_.com.zz.ady.idl.ProjectGroup = _root_.com.zz.ady.idl.ProjectGroup(
    id,
    projectGroupName,
    note,
    createdBy,
    updatedBy,
    createdAt,
    updatedAt,
    isDeleted
  )
}
