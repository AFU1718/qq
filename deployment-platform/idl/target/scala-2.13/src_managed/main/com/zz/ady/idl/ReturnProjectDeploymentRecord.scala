// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.zz.ady.idl

/** 项目部署记录列表返回
  *
  * @param id
  *   部署记录id
  * @param projectId
  *   项目id
  * @param projectName
  *   项目名称
  * @param status
  *   项目部署状态
  * @param version
  *   版本信息
  * @param changeLog
  *   版本更新信息
  * @param developers
  *   开发人员
  * @param testers
  *   测试人员
  * @param deployedAt
  *   部署时间
  * @param totalTime
  *   本次迭代开发总时间（单位：天）
  * @param note
  *   备注
  * @param creator
  *   创建人id
  * @param updater
  *   最近更新人id
  * @param createdAt
  *   创建时间
  * @param updatedAt
  *   最近更新时间
  * @param isDeleted
  *   删除标记
  */
@SerialVersionUID(0L)
final case class ReturnProjectDeploymentRecord(
    id: _root_.scala.Int = 0,
    projectId: _root_.scala.Int = 0,
    projectName: _root_.scala.Predef.String = "",
    status: _root_.scala.Int = 0,
    version: _root_.scala.Predef.String = "",
    changeLog: _root_.scala.Predef.String = "",
    developers: _root_.scala.Predef.String = "",
    testers: _root_.scala.Predef.String = "",
    deployedAt: _root_.scala.Predef.String = "",
    totalTime: _root_.scala.Int = 0,
    note: _root_.scala.Predef.String = "",
    creator: _root_.scala.Predef.String = "",
    updater: _root_.scala.Predef.String = "",
    createdAt: _root_.scala.Predef.String = "",
    updatedAt: _root_.scala.Predef.String = "",
    isDeleted: _root_.scala.Int = 0
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ReturnProjectDeploymentRecord] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = id
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
        }
      };
      
      {
        val __value = projectId
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
        }
      };
      
      {
        val __value = projectName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = status
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, __value)
        }
      };
      
      {
        val __value = version
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      
      {
        val __value = changeLog
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
        }
      };
      
      {
        val __value = developers
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, __value)
        }
      };
      
      {
        val __value = testers
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, __value)
        }
      };
      
      {
        val __value = deployedAt
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, __value)
        }
      };
      
      {
        val __value = totalTime
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(10, __value)
        }
      };
      
      {
        val __value = note
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(11, __value)
        }
      };
      
      {
        val __value = creator
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(12, __value)
        }
      };
      
      {
        val __value = updater
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(13, __value)
        }
      };
      
      {
        val __value = createdAt
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(14, __value)
        }
      };
      
      {
        val __value = updatedAt
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(15, __value)
        }
      };
      
      {
        val __value = isDeleted
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(16, __value)
        }
      };
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = id
        if (__v != 0) {
          _output__.writeInt32(1, __v)
        }
      };
      {
        val __v = projectId
        if (__v != 0) {
          _output__.writeInt32(2, __v)
        }
      };
      {
        val __v = projectName
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = status
        if (__v != 0) {
          _output__.writeInt32(4, __v)
        }
      };
      {
        val __v = version
        if (!__v.isEmpty) {
          _output__.writeString(5, __v)
        }
      };
      {
        val __v = changeLog
        if (!__v.isEmpty) {
          _output__.writeString(6, __v)
        }
      };
      {
        val __v = developers
        if (!__v.isEmpty) {
          _output__.writeString(7, __v)
        }
      };
      {
        val __v = testers
        if (!__v.isEmpty) {
          _output__.writeString(8, __v)
        }
      };
      {
        val __v = deployedAt
        if (!__v.isEmpty) {
          _output__.writeString(9, __v)
        }
      };
      {
        val __v = totalTime
        if (__v != 0) {
          _output__.writeInt32(10, __v)
        }
      };
      {
        val __v = note
        if (!__v.isEmpty) {
          _output__.writeString(11, __v)
        }
      };
      {
        val __v = creator
        if (!__v.isEmpty) {
          _output__.writeString(12, __v)
        }
      };
      {
        val __v = updater
        if (!__v.isEmpty) {
          _output__.writeString(13, __v)
        }
      };
      {
        val __v = createdAt
        if (!__v.isEmpty) {
          _output__.writeString(14, __v)
        }
      };
      {
        val __v = updatedAt
        if (!__v.isEmpty) {
          _output__.writeString(15, __v)
        }
      };
      {
        val __v = isDeleted
        if (__v != 0) {
          _output__.writeInt32(16, __v)
        }
      };
    }
    def withId(__v: _root_.scala.Int): ReturnProjectDeploymentRecord = copy(id = __v)
    def withProjectId(__v: _root_.scala.Int): ReturnProjectDeploymentRecord = copy(projectId = __v)
    def withProjectName(__v: _root_.scala.Predef.String): ReturnProjectDeploymentRecord = copy(projectName = __v)
    def withStatus(__v: _root_.scala.Int): ReturnProjectDeploymentRecord = copy(status = __v)
    def withVersion(__v: _root_.scala.Predef.String): ReturnProjectDeploymentRecord = copy(version = __v)
    def withChangeLog(__v: _root_.scala.Predef.String): ReturnProjectDeploymentRecord = copy(changeLog = __v)
    def withDevelopers(__v: _root_.scala.Predef.String): ReturnProjectDeploymentRecord = copy(developers = __v)
    def withTesters(__v: _root_.scala.Predef.String): ReturnProjectDeploymentRecord = copy(testers = __v)
    def withDeployedAt(__v: _root_.scala.Predef.String): ReturnProjectDeploymentRecord = copy(deployedAt = __v)
    def withTotalTime(__v: _root_.scala.Int): ReturnProjectDeploymentRecord = copy(totalTime = __v)
    def withNote(__v: _root_.scala.Predef.String): ReturnProjectDeploymentRecord = copy(note = __v)
    def withCreator(__v: _root_.scala.Predef.String): ReturnProjectDeploymentRecord = copy(creator = __v)
    def withUpdater(__v: _root_.scala.Predef.String): ReturnProjectDeploymentRecord = copy(updater = __v)
    def withCreatedAt(__v: _root_.scala.Predef.String): ReturnProjectDeploymentRecord = copy(createdAt = __v)
    def withUpdatedAt(__v: _root_.scala.Predef.String): ReturnProjectDeploymentRecord = copy(updatedAt = __v)
    def withIsDeleted(__v: _root_.scala.Int): ReturnProjectDeploymentRecord = copy(isDeleted = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = id
          if (__t != 0) __t else null
        }
        case 2 => {
          val __t = projectId
          if (__t != 0) __t else null
        }
        case 3 => {
          val __t = projectName
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = status
          if (__t != 0) __t else null
        }
        case 5 => {
          val __t = version
          if (__t != "") __t else null
        }
        case 6 => {
          val __t = changeLog
          if (__t != "") __t else null
        }
        case 7 => {
          val __t = developers
          if (__t != "") __t else null
        }
        case 8 => {
          val __t = testers
          if (__t != "") __t else null
        }
        case 9 => {
          val __t = deployedAt
          if (__t != "") __t else null
        }
        case 10 => {
          val __t = totalTime
          if (__t != 0) __t else null
        }
        case 11 => {
          val __t = note
          if (__t != "") __t else null
        }
        case 12 => {
          val __t = creator
          if (__t != "") __t else null
        }
        case 13 => {
          val __t = updater
          if (__t != "") __t else null
        }
        case 14 => {
          val __t = createdAt
          if (__t != "") __t else null
        }
        case 15 => {
          val __t = updatedAt
          if (__t != "") __t else null
        }
        case 16 => {
          val __t = isDeleted
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(id)
        case 2 => _root_.scalapb.descriptors.PInt(projectId)
        case 3 => _root_.scalapb.descriptors.PString(projectName)
        case 4 => _root_.scalapb.descriptors.PInt(status)
        case 5 => _root_.scalapb.descriptors.PString(version)
        case 6 => _root_.scalapb.descriptors.PString(changeLog)
        case 7 => _root_.scalapb.descriptors.PString(developers)
        case 8 => _root_.scalapb.descriptors.PString(testers)
        case 9 => _root_.scalapb.descriptors.PString(deployedAt)
        case 10 => _root_.scalapb.descriptors.PInt(totalTime)
        case 11 => _root_.scalapb.descriptors.PString(note)
        case 12 => _root_.scalapb.descriptors.PString(creator)
        case 13 => _root_.scalapb.descriptors.PString(updater)
        case 14 => _root_.scalapb.descriptors.PString(createdAt)
        case 15 => _root_.scalapb.descriptors.PString(updatedAt)
        case 16 => _root_.scalapb.descriptors.PInt(isDeleted)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.zz.ady.idl.ReturnProjectDeploymentRecord
}

object ReturnProjectDeploymentRecord extends scalapb.GeneratedMessageCompanion[com.zz.ady.idl.ReturnProjectDeploymentRecord] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.zz.ady.idl.ReturnProjectDeploymentRecord] = this
  def merge(`_message__`: com.zz.ady.idl.ReturnProjectDeploymentRecord, `_input__`: _root_.com.google.protobuf.CodedInputStream): com.zz.ady.idl.ReturnProjectDeploymentRecord = {
    var __id = `_message__`.id
    var __projectId = `_message__`.projectId
    var __projectName = `_message__`.projectName
    var __status = `_message__`.status
    var __version = `_message__`.version
    var __changeLog = `_message__`.changeLog
    var __developers = `_message__`.developers
    var __testers = `_message__`.testers
    var __deployedAt = `_message__`.deployedAt
    var __totalTime = `_message__`.totalTime
    var __note = `_message__`.note
    var __creator = `_message__`.creator
    var __updater = `_message__`.updater
    var __createdAt = `_message__`.createdAt
    var __updatedAt = `_message__`.updatedAt
    var __isDeleted = `_message__`.isDeleted
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __id = _input__.readInt32()
        case 16 =>
          __projectId = _input__.readInt32()
        case 26 =>
          __projectName = _input__.readStringRequireUtf8()
        case 32 =>
          __status = _input__.readInt32()
        case 42 =>
          __version = _input__.readStringRequireUtf8()
        case 50 =>
          __changeLog = _input__.readStringRequireUtf8()
        case 58 =>
          __developers = _input__.readStringRequireUtf8()
        case 66 =>
          __testers = _input__.readStringRequireUtf8()
        case 74 =>
          __deployedAt = _input__.readStringRequireUtf8()
        case 80 =>
          __totalTime = _input__.readInt32()
        case 90 =>
          __note = _input__.readStringRequireUtf8()
        case 98 =>
          __creator = _input__.readStringRequireUtf8()
        case 106 =>
          __updater = _input__.readStringRequireUtf8()
        case 114 =>
          __createdAt = _input__.readStringRequireUtf8()
        case 122 =>
          __updatedAt = _input__.readStringRequireUtf8()
        case 128 =>
          __isDeleted = _input__.readInt32()
        case tag => _input__.skipField(tag)
      }
    }
    com.zz.ady.idl.ReturnProjectDeploymentRecord(
        id = __id,
        projectId = __projectId,
        projectName = __projectName,
        status = __status,
        version = __version,
        changeLog = __changeLog,
        developers = __developers,
        testers = __testers,
        deployedAt = __deployedAt,
        totalTime = __totalTime,
        note = __note,
        creator = __creator,
        updater = __updater,
        createdAt = __createdAt,
        updatedAt = __updatedAt,
        isDeleted = __isDeleted
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.zz.ady.idl.ReturnProjectDeploymentRecord] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.zz.ady.idl.ReturnProjectDeploymentRecord(
        id = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        projectId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        projectName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        status = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        version = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        changeLog = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        developers = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        testers = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        deployedAt = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        totalTime = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        note = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        creator = __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        updater = __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        createdAt = __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        updatedAt = __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        isDeleted = __fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ProjectDeploymentRecordApiProto.javaDescriptor.getMessageTypes.get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ProjectDeploymentRecordApiProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.zz.ady.idl.ReturnProjectDeploymentRecord(
    id = 0,
    projectId = 0,
    projectName = "",
    status = 0,
    version = "",
    changeLog = "",
    developers = "",
    testers = "",
    deployedAt = "",
    totalTime = 0,
    note = "",
    creator = "",
    updater = "",
    createdAt = "",
    updatedAt = "",
    isDeleted = 0
  )
  implicit class ReturnProjectDeploymentRecordLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.zz.ady.idl.ReturnProjectDeploymentRecord]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.zz.ady.idl.ReturnProjectDeploymentRecord](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def projectId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.projectId)((c_, f_) => c_.copy(projectId = f_))
    def projectName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.projectName)((c_, f_) => c_.copy(projectName = f_))
    def status: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.status)((c_, f_) => c_.copy(status = f_))
    def version: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.version)((c_, f_) => c_.copy(version = f_))
    def changeLog: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.changeLog)((c_, f_) => c_.copy(changeLog = f_))
    def developers: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.developers)((c_, f_) => c_.copy(developers = f_))
    def testers: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.testers)((c_, f_) => c_.copy(testers = f_))
    def deployedAt: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.deployedAt)((c_, f_) => c_.copy(deployedAt = f_))
    def totalTime: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.totalTime)((c_, f_) => c_.copy(totalTime = f_))
    def note: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.note)((c_, f_) => c_.copy(note = f_))
    def creator: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.creator)((c_, f_) => c_.copy(creator = f_))
    def updater: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.updater)((c_, f_) => c_.copy(updater = f_))
    def createdAt: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.createdAt)((c_, f_) => c_.copy(createdAt = f_))
    def updatedAt: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.updatedAt)((c_, f_) => c_.copy(updatedAt = f_))
    def isDeleted: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.isDeleted)((c_, f_) => c_.copy(isDeleted = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val PROJECT_ID_FIELD_NUMBER = 2
  final val PROJECT_NAME_FIELD_NUMBER = 3
  final val STATUS_FIELD_NUMBER = 4
  final val VERSION_FIELD_NUMBER = 5
  final val CHANGE_LOG_FIELD_NUMBER = 6
  final val DEVELOPERS_FIELD_NUMBER = 7
  final val TESTERS_FIELD_NUMBER = 8
  final val DEPLOYED_AT_FIELD_NUMBER = 9
  final val TOTAL_TIME_FIELD_NUMBER = 10
  final val NOTE_FIELD_NUMBER = 11
  final val CREATOR_FIELD_NUMBER = 12
  final val UPDATER_FIELD_NUMBER = 13
  final val CREATED_AT_FIELD_NUMBER = 14
  final val UPDATED_AT_FIELD_NUMBER = 15
  final val IS_DELETED_FIELD_NUMBER = 16
  def of(
    id: _root_.scala.Int,
    projectId: _root_.scala.Int,
    projectName: _root_.scala.Predef.String,
    status: _root_.scala.Int,
    version: _root_.scala.Predef.String,
    changeLog: _root_.scala.Predef.String,
    developers: _root_.scala.Predef.String,
    testers: _root_.scala.Predef.String,
    deployedAt: _root_.scala.Predef.String,
    totalTime: _root_.scala.Int,
    note: _root_.scala.Predef.String,
    creator: _root_.scala.Predef.String,
    updater: _root_.scala.Predef.String,
    createdAt: _root_.scala.Predef.String,
    updatedAt: _root_.scala.Predef.String,
    isDeleted: _root_.scala.Int
  ): _root_.com.zz.ady.idl.ReturnProjectDeploymentRecord = _root_.com.zz.ady.idl.ReturnProjectDeploymentRecord(
    id,
    projectId,
    projectName,
    status,
    version,
    changeLog,
    developers,
    testers,
    deployedAt,
    totalTime,
    note,
    creator,
    updater,
    createdAt,
    updatedAt,
    isDeleted
  )
}
