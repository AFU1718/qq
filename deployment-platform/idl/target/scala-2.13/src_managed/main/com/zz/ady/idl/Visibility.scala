// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.zz.ady.idl

/** 可见性，显示还是隐藏
  * DB 字段名: visibility
  * DB 默认值: 1
  */
sealed abstract class Visibility(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
  type EnumType = Visibility
  def isHidden: _root_.scala.Boolean = false
  def isVisible: _root_.scala.Boolean = false
  def companion: _root_.scalapb.GeneratedEnumCompanion[Visibility] = com.zz.ady.idl.Visibility
  final def asRecognized: _root_.scala.Option[com.zz.ady.idl.Visibility.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[com.zz.ady.idl.Visibility.Recognized])
}

object Visibility extends _root_.scalapb.GeneratedEnumCompanion[Visibility] {
  sealed trait Recognized extends Visibility
  implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Visibility] = this
  /** 隐藏
    */
  @SerialVersionUID(0L)
  case object Hidden extends Visibility(0) with Visibility.Recognized {
    val index = 0
    val name = "Hidden"
    override def isHidden: _root_.scala.Boolean = true
  }
  
  /** 显示
    */
  @SerialVersionUID(0L)
  case object Visible extends Visibility(1) with Visibility.Recognized {
    val index = 1
    val name = "Visible"
    override def isVisible: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends Visibility(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
  
  lazy val values = scala.collection.immutable.Seq(Hidden, Visible)
  def fromValue(__value: _root_.scala.Int): Visibility = __value match {
    case 0 => Hidden
    case 1 => Visible
    case __other => Unrecognized(__other)
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = EnumsProto.javaDescriptor.getEnumTypes.get(15)
  def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = EnumsProto.scalaDescriptor.enums(15)
}