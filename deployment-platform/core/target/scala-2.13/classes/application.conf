akka {
  loglevel = "DEBUG"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  actor {
    provider = cluster
    allow-java-serialization = off
    serializers {
      kryo = "com.twitter.chill.akka.AkkaSerializer"
      proto = "akka.remote.serialization.ProtobufSerializer"
    }
    serialization-bindings {
      "scalapb.GeneratedMessage" = proto
      "scalapb.GeneratedEnum" = proto
       "java.io.Serializable" = kryo
    }
  }
  akka.remote.artery.advanced.outbound-message-queue-size = 10000
//  cluster {
//    seed-nodes = [
//      "akka://adx-streaming-service-snapshot@127.0.0.1:14300"
//    ]
//  }

  remote.artery {
    canonical {
      # hostname = "127.0.0.1"
      port = 0
    }
  }
}

akka.discovery {
  simple-consul {
    name = "adx64"
    host = "192.168.0.64"
    port = 8500
    maintenance-interval = 10.seconds
  }
}

akka.system.name = "simple-dev-1"

akka.http.server.preview.enable-http2 = on

//akka.grpc.client {
//  //"project.WithSpecificConfiguration" {
//  "helloworld.GreeterService" {
//    service-discovery {
//      service-name = "helloworld.GreeterService"
//    }
//    host = "localhost"
//    port = 60011
//    //override-authority = "google.fr"
//    deadline = 10m
//    user-agent = "Akka-gRPC"
//    ssl-config {
//      disabledKeyAlgorithms = [] // Allow weak certificates
//      trustManager {
//        stores = [
//          { path = "cert/server.crt", classpath = true, type = PEM }
//        ]
//      }
//    }
//  }
//  "com.zz.ady.idl.cache.SimpleCacheService" {
//    service-discovery {
//      service-name = "com.zz.ady.idl.cache.SimpleCacheService"
//    }
//    // host = "localhost"
//    host = "192.168.0.76"
////    host = "127.0.0.1"
//    port = 60001
//    deadline = 1m
//    user-agent = "Akka-gRPC"
//    ssl-config {
//      disabledKeyAlgorithms = []
//      trustManager {
//        stores = [
//          { path = "cert/server.crt", classpath = true, type = PEM }
//        ]
//      }
//    }
//  }
//  "com.zz.idl.IdMappingSimpleService" {
//    service-discovery {
//      service-name = "com.zz.idl.IdMappingSimpleService"
//    }
//    // host = "localhost"
//    host = "192.168.0.67"
//    port = 10201
//    deadline = 1m
//    user-agent = "Akka-gRPC"
//    ssl-config {
//      disabledKeyAlgorithms = []
//      trustManager {
//        stores = [
//          { path = "cert/server.crt", classpath = true, type = PEM }
//        ]
//      }
//    }
//  }
//}

app {
  timezone = "Asia/Shanghai"
}

bidding.engine {
  timeout {
    adx-timeout = 200.millis
    dsp-timeout = 100.millis
    timeout-gap = 20.millis // adx 允许的超时时间 t1 与 dsp 的超时时间 t2 的差, t2 = t1 - timeout-gap
    gradient = 10.millis    // 断路器的级差
  }
  circuit-breaker {
    max-failures = 100
    reset-timeout = 5.seconds
  }
}

http {
  main {
    host = "0.0.0.0"
    port = 10000
  }
  akka {
    host = "0.0.0.0"
    port = 10002
  }
}

database {
  main {
    dataSourceClass = org.postgresql.ds.PGSimpleDataSource
    properties = {
      serverName = "127.0.0.1"
      portNumber = 5432
      databaseName = "test"
      user = "postgres"
      password = "123456"
    }
    poolName = "simple_rw"
    connectionTimeout = 500
    maximumPoolSize = 8
    numThreads = 8
  }
  ro = ${database.main} // read only, not used yet
  ro.poolName = "adx_ro"
  report = ${database.main}
  report.properties.databaseName = "test"
  report.poolName = "test"
}

auth {
  stateless {
    jwt {
      secret = "26uKTlqR8BKpjdJ35DmuN+1q5cA28ep2xKLjR9n2QhI="
      tsec {
        header-name = "X-TSec-JWT"
        expiry-duration = 30.days
        max-idle = 1.days
      }
    }
  }
}


akka.http {
  server {
    # idle-timeout = 300001s
    request-timeout = 10s
    registration-timeout = 30s
    remote-address-header = on
    parsing.illegal-header-warnings = off
  }
  host-connection-pool {
    max-connections = 8192
    max-open-requests = 32768
    max-retries = 5
    idle-timeout = 30s # default
    client = {
      connecting-timeout = 500.milliseconds
      idle-timeout = 60s # default
    }
  }
  client {
    connecting-timeout = 500.milliseconds
    idle-timeout = 60 s # default
    parsing.illegal-header-warnings = off
  }
}

//aerospike {
//  cluster {
//    main {
//      hosts = ["adx61:3000", "adx62:3000"]
//      timeout = 100.milliseconds
//    }
//  }
//}


cassandra {
  tables {
    core-table-name = core
    event-table-name = event
    beacon-table-name = bc
  }
  common {
    keyspace = ybc
    preparedStatementCacheSize = 1000
    session {
      contactPoints=["adx66", "adx67", "adx68"]
      withPort = 9042
      withoutMetrics = true
      withoutJMXReporting = false
      maxSchemaAgreementWaitSeconds = 1
      addressTranslator = com.datastax.driver.core.policies.IdentityTranslator
    }
  }
  main.write = ${cassandra.common}
  main.write.session.queryOptions.consistencyLevel = QUORUM // QUORUM // ANY // LOCAL_QUORUM //ONE //LOCAL_QUORUM
  main.read = ${cassandra.common}
  main.read.session.queryOptions.consistencyLevel = QUORUM // QUORUM // ANY // LOCAL_QUORUM //ONE //LOCAL_QUORUM
}

// TODO 后续完善
adx.metrics-expire = 1.hours
adx.tracker.url = "http://bc-dev.iadmob.com/api/v1/beacon/1"

reporting.logs {
  // 主核心数据流
  core-1 {
    pulsar.enabled = false
    kafka {
      enabled = true
      topic-name = "y1"
    }
  }
}

akka.kafka.producer {
  parallelism = 1000
  kafka-clients {
    bootstrap.servers = "192.168.0.61:9092"
    acks = "0"
    retries = 5
    batch.size = 16384
    // linger.ms = 1
    buffer.memory = 33554432
  }
}

pulsar {
  broker = "pulsar://adx61:6650,adx62:6650,adx63:6650"
  producer {
    name = "producer1"
    persistent = on
    tenant = "ady"
    namespace = "dev"
    topic = "c11"
  }
  consumer = ${pulsar.producer}
  consumer {
    name = "consumer1"
    subscription = "s3"
    subscription-type = "Shared"
  }
}

pub.app.placement {
  banner = "10004"
  interstitial = "10001"
  splashScreen = "10002"
  native = "10003"
}

mock-dsp {
  live-banner-price = 200
  live-interstitial-price = 500
  live-deeplink = "snssdk1128://live?room_id=6818861627085949711&user_id=993583745476499"
  live-link = "https://v.douyin.com/TpaQKt/"
  mock-banner-price = 200
  mock-interstitial-price = 500
  mock-native-price = 500
  duoyue-banner-price = 200
  duoyue-interstitial-price = 500
}

